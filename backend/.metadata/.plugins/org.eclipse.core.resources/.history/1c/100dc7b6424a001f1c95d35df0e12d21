package com.filecloud.api.config;

import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.security.authentication.dao.DaoAuthenticationProvider;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.core.userdetails.UserDetailsService;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.security.web.SecurityFilterChain;



@Configuration

public class SecurityConfig  {
	@Bean
	 SecurityFilterChain securityFilterChain(HttpSecurity http) throws Exception{
		http
		  .csrf(csrf -> csrf.disable())
		  .authorizeHttpRequests(authz -> authz
				  	  .requestMatchers("/login", "/login/signin", "/login/register", "/login/signin").permitAll()
					  .anyRequest().authenticated()
		  )
		    .formLogin(form -> form
	                .loginProcessingUrl("/login")
	                .defaultSuccessUrl("/FileCloudProject/frontend/index.html", true) // 更新這行
	                .failureUrl("/login?error=true")
	          );
	  
		  return http.build();
	}
    @Bean
     UserDetailsService userDetailsService() {
        return new UserAuthorityService(); // 你之前定義的 UserAuthorityService
    }

    @Bean
     BCryptPasswordEncoder passwordEncoder() {
        return new BCryptPasswordEncoder();
    }

    @Bean
     DaoAuthenticationProvider daoAuthenticationProvider() {
        DaoAuthenticationProvider provider = new DaoAuthenticationProvider();
        provider.setUserDetailsService(userDetailsService());
        provider.setPasswordEncoder(passwordEncoder());
        return provider;
    }

	

}
